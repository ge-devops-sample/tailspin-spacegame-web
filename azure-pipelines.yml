trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  leaderboardRepository: 'leaderboard'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'
  dotnetSdkVersion: '3.1.100'

stages:
- stage: 'Build'
  displayName: 'Build and publish'
  jobs:  
  - job: 'Build'
    displayName: 'Build and Test'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 2.1.505 for SonarCloud'
      inputs:
        version: '2.1.505'

    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: 'SonarCloud connection 1'
        organization: '$(SonarOrganization)'
        scannerMode: 'MSBuild'
        projectKey: '$(SonarProjectKey)'
        projectName: '$(SonarProjectName)'
        projectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
          sonar.exclusions=**/wwwroot/lib/**/*
      # condition: |
      #   and
      #   (
      #     succeeded(),
      #     eq(variables['Build.Reason'], 'PullRequest'),
      #     eq(variables['System.PullRequest.TargetBranch'], 'master')
      #   )
          
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
        projects: '**/Tailspin.SpaceGame.Web.csproj'

    - script: |
        docker build -f Dockerfile.build -t dotnetcore-build:$(tag) .
        docker run --name dotnetcoreapp --rm -d dotnetcore-build:$(tag) tail -f /dev/null
        docker exec dotnetcoreapp ls -l -R /app
        docker cp dotnetcoreapp:app/Tailspin.SpaceGame.Web.Tests/TestResults $(System.DefaultWorkingDirectory)
        docker cp dotnetcoreapp:app/out $(System.DefaultWorkingDirectory)
        docker stop dotnetcoreapp
      failOnStderr: true

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Build.SourcesDirectory)/**/*.trx'
        failTaskOnFailedTests: true
        
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud code analysis'
      # condition: |
      #   and
      #   (
      #     succeeded(),
      #     eq(variables['Build.Reason'], 'PullRequest'),
      #     eq(variables['System.PullRequest.TargetBranch'], 'master')
      #   )

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud quality gate results'
      # condition: |
      #   and
      #   (
      #     succeeded(),
      #     eq(variables['Build.Reason'], 'PullRequest'),
      #     eq(variables['System.PullRequest.TargetBranch'], 'master')
      #   )
    
    - task: WhiteSource Bolt@20
      displayName: 'Run WhiteSource Bolt'

    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)
    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests

- stage: 'Provision'
  displayName: 'Provision Azure Kubernetes Service'
  dependsOn: Build
  jobs:
  - job: Provision
    displayName: 'Provision Azure Kubernetes Service'
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - group: Release
    steps:
    - script: |
        # Exit when any command returns a failure status.
        set -e
 
        # Initialize Terraform.
        cd $(Build.SourcesDirectory)/terraform_k8s && terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve
  
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        TF_VAR_client_id:  $(ARM_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_CLIENT_SECRET)


- template: templates/deploy-stage.yml
  parameters:
    stageName: 'DeployTest'
    environment: test
    registryConnection: 'Container Registry Connection'
    kubernetesConnection: 'Kubernetes Cluster Connection Test'
    namespace: 'micro-services-test'
    webRepository: $(webRepository)
    tag: $(tag)
    dependsOn: Provision

- template: templates/deploy-stage.yml
  parameters:
    stageName: 'DeployProd'
    environment: prod
    registryConnection: 'Container Registry Connection'
    kubernetesConnection: 'Kubernetes Cluster Connection Prod'
    namespace: 'micro-services'
    webRepository: $(webRepository)
    tag: $(tag)
    dependsOn: 'DeployTest'
