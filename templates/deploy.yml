parameters:
  jobName: false
  environment: false
  registryConnection: false
  kubernetesConnection: false
  namespace: false
  webRepository: false
  tag: false

jobs:
- deployment: "${{ parameters.jobName }}"
  displayName: "Deploy to ${{ parameters.environment }}"
  pool:
    vmImage: 'ubuntu-16.04'
  environment: "${{ parameters.environment }}.${{ parameters.namespace }}"
  variables:
  - group: Release
  strategy:
    runOnce:
      deploy:
        steps:
        - script: |
            echo $(RegistryName)/${{ parameters.webRepository }}:${{ parameters.tag }}

        - download: current
          artifact: manifests
          
        - task: KubernetesManifest@0
          displayName: Create imagePullSecret
          inputs:
            action: createSecret
            secretName: $(imagePullSecret)
            dockerRegistryEndpoint: ${{ parameters.registryConnection }}
            kubernetesServiceConnection: ${{ parameters.kubernetesConnection }}
            namespace: ${{ parameters.namespace }}
        
        - task: KubernetesManifest@0
          displayName: Deploy to Kubernetes cluster
          inputs:
            action: deploy
            kubernetesServiceConnection: ${{ parameters.kubernetesConnection }}
            namespace: ${{ parameters.namespace }}
            manifests: |
              $(Pipeline.Workspace)/manifests/deployment.yml
              $(Pipeline.Workspace)/manifests/service.yml
            imagePullSecrets: |
              $(imagePullSecret)
            containers: |
              $(RegistryName)/${{ parameters.webRepository }}:${{ parameters.tag }}

        - task: Kubernetes@1
          displayName: Kubernetes login
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.kubernetesConnection }}
            namespace: ${{ parameters.namespace }}
            command: login
       
        - script: |
            WebService=$(kubectl get service web -n  ${{ parameters.namespace }} -o json | jq .status.loadBalancer.ingress[0].ip | sed 's/\"//g')
            echo "##vso[task.setvariable variable=WebService;isOutput=true]$WebService"
          name: 'getWebService'
          displayName: 'Get web service'